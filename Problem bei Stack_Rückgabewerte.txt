// Falsch

#include<stdlib.h>
#include<stdio.h>
int * getIntArray5(void) {
int arr[5];
int i = 0;
for(i =0; i < 5; i++)
arr[i] = 0;
return arr;
}
int main(void){
int * p ;
int i = 0;
p = getIntArray5();
for(i =0; i <5; i++)
printf("%d\n", p[i]);
return 0;
}

Es wird nicht funktionieren weil nach dem Rückgabewert von arr wird die Startadresse vom Array,die im Stack ist, gelöscht.
Lösung: dynamische Speicher Allokation

// Korektur

#include<stdlib.h>
#include<stdio.h>
#define n  5

int * getIntArray5(void) {
   int* arr=malloc(sizeof(int)*n);
    for(int i =0; i < n; i++)
        arr[i] = 0;
    return arr;
}
int main(void){
    int * p ;
    int i = 0;
    p = getIntArray5();
    for(i =0; i <n; i++)
    printf("%d\n", *(p+i));
    free(p);
    return 0;
}